{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","to_address":"g1a3lc695gkusgsep6p8jsu2rh34ps77q0aglh34","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aijm8N1gZwShpsIZe96/o1CmHdenljEhC5w3MA1JBTj6"},"signature":"Adc8/Aqi9MN924rj2lWmTch+xTpn0GKEx0U18SAyFIBTrBt0zNenIHfHeOC8uGlKA3u5zGPq79joMmP0WRThqw=="}],"memo":""},"blockNum":"243131"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1a3lc695gkusgsep6p8jsu2rh34ps77q0aglh34","to_address":"g1a3lc695gkusgsep6p8jsu2rh34ps77q0aglh34","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzyXgePzj102iLWxt0jGK3qDTmykoCoTdeNBgZ8YDUkQ"},"signature":"6/5CPYoI/U+deVWs9NyCIxPg+B1c8QF9Rb5Gk3LpSH4gEhmhI6tz0RfEsgtk64cDsXpWiGmtXEJm4lc1dC0coQ=="}],"memo":""},"blockNum":"243133"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g19n7904gdgt6q5cuccenxp2t9a73y5emftdvtq6","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"123456ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2yN8q91tyW4xxOkscBAe8TDDeZlbqs+ZBlg3cBc0vTR"},"signature":"pGiTTlur61W8189Rmrc/tyDD4Hmdg3cXs8/kQxdMxbcNmlUSX2GLqvPAV+tOL3goRkSNdk1DBfLmcQh8U0asGA=="}],"memo":""},"blockNum":"243256"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g19n7904gdgt6q5cuccenxp2t9a73y5emftdvtq6","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"123456ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2yN8q91tyW4xxOkscBAe8TDDeZlbqs+ZBlg3cBc0vTR"},"signature":"J2Z3VmM2St5wPKEThmVHvKTHJXIJa7xjKcW4x6iRHlMMF+yF1QFvTsiX6eV0WbB+F11JTPomMJaOqpObz1CNmA=="}],"memo":""},"blockNum":"243258"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"sgDBa8Zo3dyg/u5apvcxK6fw45VhXGREfviSVZNzutQZ7AA7SRuNJgQQ/cjRS2H616gbORzCAv/BERbcc9FNMw=="}],"memo":""},"blockNum":"243260"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ozXP/KR71SG3qGuIDOtQyhdfn6KcwaDJ0fkc59x/I0E2pNq+wJsnwGkuy/gEHA+MtF0vwQow/aLWJRkYIqDkiQ=="}],"memo":""},"blockNum":"243262"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ycyclyqnc3msyfdjl94xrlqtjy6fp9fzep0ukn","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"GHUZT2kKDFnB7jn+2kpEl8t/hUU6T2nM1UO20KmfmGAGXaEgKpdah3vfJPBlwKHWRZ6mNeY7KbdfjxbX/kHctA=="}],"memo":""},"blockNum":"243264"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Rprxi5mnu7dVc1R8RfSHzB9mkgebwlA6SsFzrizXCOVBvoR3KjD+IPF//8nikdIta6D1cwbWejeopfejVSVnXw=="}],"memo":""},"blockNum":"243266"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g19n7904gdgt6q5cuccenxp2t9a73y5emftdvtq6","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"tsJcyaQsPj26V+qRwvqTNEXHxJpc/SEuvjDJEg2c/X5Pz5ZUX9XGcdQYj+wMWUgs794PM1fVoJ1b7v5MKkvRTw=="}],"memo":""},"blockNum":"243268"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g19n7904gdgt6q5cuccenxp2t9a73y5emftdvtq6","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2yN8q91tyW4xxOkscBAe8TDDeZlbqs+ZBlg3cBc0vTR"},"signature":"qPjLJaAmAWyxRj0gSf+tmGfd9oxCN8pLVNguzXNTc9EENs0D7uTiYr59zCqAeYg605zqBj+wfoTEoIrjjwRWdA=="}],"memo":""},"blockNum":"243270"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1234ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0kzkYEt8K5ZALtwx28ajSrJZ3f7mI5J91Lqeaf2Rqhw"},"signature":"FpSrCw7WbspEJsUw070Rc2Mj1rFhN30oUorgq3+A4mx/74Wx8qqnNgL913QXvZ1UGgNEX32IdLEwyXIv/N898A=="}],"memo":""},"blockNum":"243499"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mzz4uns3umnmdure5f5julh7kqnd98rh85k3yr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"HR00meLie4d8r818gkIRSkAVVikozIeabcdF16JmOdwY9ur6BmjQymcp8j/Go7D3YM1JJdW891dM4U2tzb5X6A=="}],"memo":""},"blockNum":"243521"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1mzz4uns3umnmdure5f5julh7kqnd98rh85k3yr","package":{"Name":"gnomey","Path":"gno.land/r/demo/gnomey","Files":[{"Name":"GRC20.gno","Body":"package gnomey\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tgnomey  *grc20.AdminToken\r\n\tadmin std.Address = \"g1mzz4uns3umnmdure5f5julh7kqnd98rh85k3yr\"\r\n)\r\n\r\nfunc init() {\r\n\tgnomey = grc20.NewAdminToken(\"gnomeyToken\", \"gnomey\", 6)\r\n\tgnomey.Mint(admin, 1000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn gnomey.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := gnomey.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := gnomey.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tgnomey.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tgnomey.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tgnomey.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tgnomey.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tgnomey.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn gnomey.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := gnomey.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiVrup9APOHRPszGaoF+qFTqAMhjHEfg196/3W+Vl40G"},"signature":"jfsMMPWLNzTIwd9k64um5APS9oRn7FQmWg8k6nULvF5wP6rTgTNq62bWAHCNjWHbuIherc7qB9yD0LB5VUhwZw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"243527"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1234000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"YAYAIE0tDNRVo1OrK9+uf5ZjwrwmF7mKrqw4ZaAfb1IZCvZ8i2PU//uHcHVLcklQgg45LlSp51O9BIWiwJnk8w=="}],"memo":""},"blockNum":"243542"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"Name":"done","Path":"gno.land/r/demo/done","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"},{"Name":"GRC20.gno","Body":"\r\npackage done\r\n\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tdone  *grc20.AdminToken\r\n\tadmin std.Address = \"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5\"\r\n)\r\n\r\nfunc init() {\r\n\tdone = grc20.NewAdminToken(\"doneToken\", \"done\", 6)\r\n\tdone.Mint(admin, 22000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn done.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := done.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := done.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tdone.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tdone.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tdone.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tdone.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tdone.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn done.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := done.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7MWSLkjf+z/CYfMh6KVHEaHLDWpnfGBRDqFO81j1FRN"},"signature":"8I6uV8y+4C5NTYfORvNXQOSjQ2bSKcg7wPCkE/uw3SUOrt08uD8f/OlevIVuEQc7xYifN4Xn0jrwsxUXqP1VEQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"243550"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"Name":"done","Path":"gno.land/r/demo/done","Files":[{"Name":"GRC20.gno","Body":"\r\npackage done\r\n\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tdone  *grc20.AdminToken\r\n\tadmin std.Address = \"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5\"\r\n)\r\n\r\nfunc init() {\r\n\tdone = grc20.NewAdminToken(\"doneToken\", \"done\", 6)\r\n\tdone.Mint(admin, 22000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn done.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := done.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := done.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tdone.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tdone.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tdone.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tdone.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tdone.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn done.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := done.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7MWSLkjf+z/CYfMh6KVHEaHLDWpnfGBRDqFO81j1FRN"},"signature":"cTUYlSFXB85FQerRdHr9R9hZgCfOPQjfLl3KJVh6Jn4XfBO0aMRKLraAPNeQpno7G5xMWAkYKRgU7UHrM3Salw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"243556"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"4XLxAJW0wcdHSBicpvBRnFNagR8DHIbgVNIp46+J424mf7TJW+jWYF4QRpvd/TAR1w5DlJM8ePXvk4mlWdfmvA=="}],"memo":""},"blockNum":"243558"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"321123456ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"owgQoMVCr5EsFGn5mU16NcoHskgRxW94wdEWJNx0A3V+riT1KFSWRDV3LVEuslskuF+IeyVW/Wp3err1GYJDXg=="}],"memo":""},"blockNum":"243560"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"abcdefghijklmnopqrstuvwxyz1234567890123456789012345678901234567890","func":"abcdefghijklmnopqrstuvwxyz1234567890123456789012345678901234567890","args":["abcdefghijklmnopqrstuvwxyz1234567890123456789012345678901234567890"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"OiZ3uhu/IOQ2xJht1LsHIW/0Ylg2WLsHsuCu8iU4bB436RTHrpcLJ2V77S02+GIndxd6qoiRU+jgNbRxoxwbig=="}],"memo":""},"blockNum":"243563"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/hoho12345678901234567890","func":"abcdefghijklmnopqrstuvwxyz1234567890123456789012345678901234567890","args":["abcdefghijklmnopqrstuvwxyz1234567890123456789012345678901234567890"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"hx+l/8FZSyfLVFg5lrxdlSZdMlofLPxmGVRQuNsg/vdrRRArTa8O+INjbzWC7rTfPf6in4n2NIE5JKitxowr1w=="}],"memo":""},"blockNum":"243565"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"123456ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"0EUlj7tBt4SCwRao/DWvnK038QmMyLYG74iq3QZfbHoeeHeCtn9cAwZkCPOjtCda9xYEOG89NQhZlh8chho9lA=="}],"memo":""},"blockNum":"243573"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Y0KxyyaBz7wSvpg0qzESSYEDHETxe8XHtKti8JMjgm0lNRhIY/Al07Q5y9Kc+J5w1yIIxgRgFRjCCjCjthbSBw=="}],"memo":""},"blockNum":"243655"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["bgl-poc1","Building Gno.land – Next Generation Smart Contract System","\n*Disclaimer: The Building Gno.land series aims to share the core concepts of our platform, mission, and tech stack, providing a snapshot of a current state on our builder’s journey. New episodes may deprecate previous ones, but no editions will be modified at any time. We encourage you to follow along as we create the rails for a more transparent and accountable society, and we welcome feedback and contributions to the repo.*\n\n## I. What Is Proof of Contribution (PoC)?\n\nGno.land is secured by a novel consensus mechanism that makes our platform unique—Proof of Contribution (PoC). PoC prioritizes fairness and merit, rewarding the people most active on the platform and revolutionizing the concept of open-source rewards. By removing the voting power associated with being wealthy (holding tokens in Proof-of-Stake (PoS) networks or amassing mining hardware in Proof-of-Work (PoW) networks), PoC restructures the financial incentives that tend to corrupt blockchain projects in the long run and rewards contributors fairly for their work based on their expertise, commitment, and values. \n\nGno.land contributors receive rewards and voting power according to their contribution level. These rewards increase as they make additional contributions, gain expertise, and are promoted up the Gno.land governing DAO’s (GovDAO) tier levels by higher-level contributors. So how does PoC work, what are its core features, and how does it lend security and decentralization to the platform? \n\n### Prioritizing Fairness and Alignment \n\nProof of Stake (PoS) was a monumental leap forward for the blockchain industry, solving the energy-intensive requirements of Proof of Work (PoW) and enabling blockchains to scale for broader adoption (thanks to its minimal carbon footprint and faster throughput). However, like PoW, PoS has some disadvantages. For example, in PoS networks, participants receive rewards based on how many tokens they stake, which means their incentives for working on the chain are often purely financial. Validators accumulate vast net worths and don’t always hold values that align with the core development of the chain. \n\nSince validators are crucial in securing PoS networks, they should be paid fairly for their work and encouraged to contribute more. However, validators should not be purely financially (and certainly not politically) motivated, taking up competing positions and launching political campaigns to convince token holders to stake with them. This type of lobbying affects all aspects of the chain’s development—from governance to technical upgrades—and can lead to factionalism and misalignment. \n\nPoC makes the system fairer and more sustainable, ensuring participants are aligned and take actions that benefit the Gno.land community and the broader ecosystem. That’s why (unlike PoS) contributors receive rewards based on their contribution effort (tier level) rather than how many tokens they stake. They are thus incentivized and recognized for the quality of their work, ideas, and alignment, driving participation and active engagement. Governance is allocated to the people most likely to care for the ecosystem’s long-term success—the contributors who have spent the most time working toward it—from open-source developers to video creators and everyone in between.\n\n### Rethinking Financial Incentives \n\nFor long-term security and sustainability, PoC emphasizes project principles and values over monetary gains, replacing standard token incentives with a system that separates voting power from token ownership. Two reward systems are currently being considered (in addition to a hybrid system). For the first, contributors receive WORX units that weigh the amount of GNOT tokens (the native Gno.land gas token) earned each month. Each member of the same tier receives the same amount of WORX. At the end of the month, the total each member earned is divided by the total amount of WORX distributed that month to calculate a percentage. This percentage represents the percentage of Gno.land fees earmarked for contributors that each member will earn in GNOT. WORX will likely be cleared each month to prevent cumulative, exponential reward exploits over long periods of time. \n\nFor the second, each tier level simply receives an amount of GNOT each month fixed to a USD value, similar to a salary. This would be combined with risk management and caps per tier level in order to promote long-term sustainability based on Gno.land fee generation. A hybrid of this system is also possible, either rewarding contributors of lower tiers one way and higher tiers the other or using both systems in tandem based on predefined conditions. This will be explored further in future tokenomics articles, models, and documentation.\n\nRegardless, WORX units are not transferable, will not be listed on exchanges, and hold no monetary value. WORX units are more like shares that represent value provided by contributors and allow their work to be quantified compared to other contributors/tier levels. It’s important to stress that GNOT tokens do not influence governance on the platform in any way. Voting power is earned through contributions and distributed according to contribution effort, with each member of the same tier representing equal voting power that increases with their tier level. This creates a network of highly aligned contributors who care deeply about the platform they are building and strive to improve it.\n\nGNOT, the native Gno.land gas token and the gas token of the Gno.land ecosystem, will be distributed via airdrop to qualifying ATOM stakers. It will also be available for purchase after that point (*more on Gno.land’s airdrop and tokenomics coming soon*). GNOT is used to pay all fees associated with the network and beyond, including transfers, IBC, ICS, and contract interactions, giving holders the chance to earn rewards from the economic activities of Gno.land.\n\n### What Makes a Good Contribution?\n\nWORX and/or GNOT can be earned through different types of contributions—not only coding and development expertise—but also through non-technical contributions, such as community building, governance involvement, constitutional proposals, teamwork, media creation, etc. The core focus is on alignment, not necessarily specific tasks. For example, an accepted proposal or merged code will raise or at least maintain the contributor’s tier level, allowing them to receive rewards during their time working between submissions. However, a proposal or code that has displayed a very high level of effort, detail, and aligned values (but is not merged) will also be considered in any proposals regarding contributor promotion.\n\nThis system allows the ecosystem to show appreciation for diverse forms of contributions and ‘useful failures’ that bring us closer to the solutions we adopt. It is designed to foster engagement, creativity, and collaboration while encouraging anyone aligned to contribute to growing the Gno.land chain and community.  \n\n### How Are Contributions Assessed?\n\nThere is a strong human element to deciding what makes a good contribution, requiring knowledgeable human judges to exercise discretion. As such, contributions won’t be templated by default or rewarded automatically but assessed through Gno.land’s governing DAO, GovDAO. GovDAO is responsible for development and governance and is organized into tiers, as discussed above.\n\nGovDAO members review, measure, and curate contributions, and the tokenomics of GovDAO incentivizes members to be effective and unbiased evaluators. They engage in discussions and assess contributions based on effort, time, and other relevant factors/metrics that contributors will have stored in their profiles. The decision-making rationale is transparent and visible through on-chain forums. Again, contributors are assigned a tier level and receive a corresponding reward each month according to their tier. As contributors join GovDAO, the DAO grows, giving Gno.land decentralization efficiency and a high Satoshi score. \n\nGovDAO is assisted by a network of knowledge-specific DAOs, such as an Engineering DAO, a Support DAO, an Operations DAO, and the EvaluationDAO, which comprises a trusted group of high-reputation contributors that help assess specific contributions. This enables secure collaboration and seamless integration (*more on Gno.land’s network of interconnected DAOs coming soon*.) \n\n### Sybil-Resistant and Secure\n\nIn addition to being fairer, more aligned, and sustainable, PoC is Sybil-resistant by design. In blockchains, a Sybil attack is where one or multiple attackers multiply their presence and influence by creating fake identities to sway major network decisions (for example, including malicious blocks). In terms of PoS, the Sybil resistance is purely monetary (people need to stake real money to get power), so an attacker that wants to carry out a Sybil attack on a PoS network needs to lock at least as much stake as that locked by honest validators.\n\nPoC minimizes risks of Sybil attacks, takeovers, and alliances as the community vets every person who is given any power or sway in the network (including validator power) through the DAO, so at no point can anyone \"spoof\" identities and regain major sway. Moreover, Gno.land is built and secured by the merit and effort put into the project, as opposed to how many tokens someone can buy, rethinking financial incentives and making the platform Sybil-resistant and secure.\n\nThrough fairer rewards, restructured incentives, resistance to corruption and Sybil attacks, and a strong appreciation for all contributions, Gno.land is designed to be sustainable and fair. A censorship-resistant platform built, owned, and secured by a growing, aligned community for many generations to come.\n\n*I. What Is Proof of Contribution? is the first in a series of articles to dive deeply into the philosophy, vision, mechanics, and work involved in developing a new consensus mechanism for the next generation of smart contract systems. Look out for subsequent editions and additional Building Gno.land series, and let us know what you think! Got questions? Join the Gno.land [Discord](https://discord.com/invite/S8nKUqwkPn) or follow us on [Twitter/X](https://x.com/_gnoland)*.\n","building-gnoland,gnoland,proof-of-contribution"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"loUVujuxm+Og59ggqpe3wdgqllLTGeFgjkZAMivHJjlUV7ezE9UP89DGAs7Vr2UE9t5wjHis/7kwM3UCAQ3fng=="}],"memo":"from gnoblog-cli"},"blockNum":"243816"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["bgl-poc2","Building Gno.land - Proof of Contribution II","\n## II. Proof of Contribution vs Proof of Stake\n\nProof of Stake (PoS) is a robust consensus mechanism that provides a more environmentally friendly and scalable alternative to Proof of Work (PoW) and powers most of the web3 industry today. As PoS pioneers, Cosmos technology secures hundreds of blockchain projects and billions of dollars of digital assets, and Ethereum (launched as a PoW chain in 2015) made the historic switch to PoS in 2022. According to [ethereum.org](https://ethereum.org/en/developers/docs/consensus-mechanisms/pos), PoS is “more secure, less energy-intensive, and better for implementing new scaling solutions compared to the previous proof-of-work architecture.” However, as we briefly discussed in [*What Is Proof of Contribution?*](https://test3.gno.land/r/gnoland/blog:p/bgl-poc-1), PoS has vulnerabilities that can corrupt the network over time.\n\n### The Limitations of Proof of Stake (PoS)\n\nBeyond securing the network, the main goal of any consensus mechanism (PoW, PoS, DPoS, PoC, etc.) is to be as decentralized as possible and not reliant on any central actors. This can be measured by the Satoshi Score (or the Nakamoto coefficient), a quantitative measure that assesses a blockchain’s level of decentralization by calculating the minimum number of nodes needed to compromise a network or carry out a 51% attack. PoS systems can be bootstrapped within days (or even hours), starting off decentralized and achieving a high Satoshi Score.\n\nThe PoS chain Genesis allocates a default voting power to ~20-50 nodes, in general equally (or at least making sure that no single node has more than 5% of the voting power). This makes PoS chains decentralized enough (in theory) from block 0 with a near-perfect Satoshi score. However, in practice, PoS has two main issues. Because the system is dictated by money, PoS chains become imperfect over time. Anyone wealthy enough can stake their tokens progressively and use their accumulated power to sway decision-making on the chain—or take the network over completely.\n\nThe chain can limit the maximum voting power per validator node, but this is almost ineffective, as a malicious actor can carry out a Sybil attack on the network and create multiple validators to bypass the voting cap. Such an attack renders the max voting power per node useless and leaves the chain defenseless against a single organization or cartel gaining the majority of the voting power. PoS systems leave chains like Cosmos Hub and Ethereum at risk from such bad actors, cartels, and powerful protocols (such as Lido and Rocket Pool).\n\nWhile Proof of Contribution (PoC) can’t prevent Sybil attacks on standard user accounts (when malicious actors create multiple accounts with a single computer and transfer tokens within a few hours), it does make it almost impossible for validator nodes to suffer Sybil attacks. Since the community vets every person who is given voting power or sway in the network (including validator power) through the DAO, at no point can anyone \"spoof\" identities and gain major sway. \n\n### Where Proof of Contribution (PoC) Excels\n\nPoC is actually Proof of Authority (PoA) which, instead of offering up a resource like computing power or a financial stake, relies on validators staking their reputation. Anyone can join most public PoW and PoS networks without revealing their identity. However, by definition, PoA validators need to make themselves known and are selected based on their trustworthiness. This means PoA tends to work better when deployed in private or permissioned blockchains than in public platforms (because of this tendency toward centralization). \n\nPoC solves this problem, ensuring the network becomes increasingly decentralized over time by being governed by a decentralized entity, GovDAO. Like standard PoA chains, PoC chains launch with a handful of validators that must be identified and trusted by the network, meaning governance is centralized at the start, and the chain achieves a low Satoshi Score. The system is about contributing and earning contribution units, which are slow to gain and require human interaction. It takes months (or years) before there are enough actors in the DAO and sufficient voting power for the chain to be considered decentralized enough, according to the Nakamoto coefficient. \n\nPoC is thus slower to bootstrap than PoS and harder to achieve. You can think of PoC versus PoS as a marathon versus a sprint, whereby PoC starts slowly but then gains momentum over time, and PoS starts quickly but loses momentum over time (the graph below provides a visual representation of PoC versus PoS). \n\n[![Graph](https://gnolang.github.io/blog/2024-01-26_bgl-poc2/src/thumbs/graph-container.png)](https://gnolang.github.io/blog/2024-01-26_bgl-poc2/src/graph-container.png)\n\nThe GovDAO that owns the chain has a mandate to scale (to grow and decentralize) continuously as it adds more contributors. This means it becomes progressively larger over time, achieving high decentralization efficiency way beyond the initial fast sprint of PoS chains. Once established as a proven consensus mechanism and alternative to PoS, GovDAO can benefit from by any blockchain project (through an evolution of ICS) wanting to achieve decentralization and sustainability—PoC can secure Gno.land and the web3 industry at large.\n\n### Security-Conscious by Design\n\nAnother advantage of PoC is that because it’s reliant on human interactions, it is more Sybil-resistant by design. As discussed, it’s almost impossible to split a validator node into two (or more) nodes, making conducting a Sybil attack infinitely difficult. Since contribution units are not transferrable or exchangeable, PoC cannot suffer from whales attempting to purchase voting power quickly. If someone wanted to take over the network, they would need to invest years of their time making meaningful contributions. Their attack would be so slow that it would easily be prevented by humans monitoring the decentralization and adjusting the parameters. \n\nMoreover, GovDAO will activate and deactivate new validators on request, establish a KYC system for validators, and manage promotions of contributors with votes. This removes the possibility of a takeover happening overnight since the only way to gain validator or voting power is by voting on governance requests, which is slow and managed by humans. This is in contrast to PoS systems which are powerful and fully automated yet defenseless against such coordinated attacks.\n\nGno.land is built on the very premise that such an attack on a PoC network would never happen as it would be entirely counter-intuitive. Since contributions are not only about expertise but also alignment, it is our hypothesis that longstanding contributors who have invested years of time and brainpower in developing the chain will do their best to protect it rather than destroy it. The DAO system will endure thanks to the mix of expertise and alignment and the amount and frequency of contributions. \n\n### Concluding Thoughts\n\nBeyond separating voting power from net wealth, a core component of Proof of Contribution (PoC) is its focus on long-term sustainability. PoC makes the system fairer and more sustainable, ensuring participants are aligned and take actions that benefit the community and the broader ecosystem. PoC is slower to bootstrap and harder to achieve than PoS but focuses on long-term alignment and security. \n\nUnlike PoS, contributors receive rewards based on their contribution effort rather than how many tokens they stake. They are thus incentivized and recognized for the quality of their work, ideas, and alignment, driving participation and active engagement. Governance is allocated to the people most likely to care for the ecosystem’s long-term success—the contributors who have spent the most time working toward it.\n\n*II. Proof of Contribution vs Proof of Stake is the second in a series of articles to dive deeply into the philosophy, vision, mechanics, and work involved in developing a new consensus mechanism for the next generation of smart contract systems. Look out for subsequent editions and additional Building Gno.land series, and let us know what you think! Got questions? Join the Gno.land [Discord](https://discord.com/invite/S8nKUqwkPn) or follow us on [Twitter/X](https://x.com/_gnoland)*\n\n\n","gnoland,gnovm,tm2,PoC"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"BZzHzmemXUmKmsk8pSoTwW3XMZ3dHz2/Kitr9excd/5o+3pN7jV8xAeojSeM7UUQ7PMNo51hl0HpIGSe/zWDFw=="}],"memo":"from gnoblog-cli"},"blockNum":"243818"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["bgl-poc2","Building Gno.land - Proof of Contribution II","\n## II. Proof of Contribution vs Proof of Stake\n\nProof of Stake (PoS) is a robust consensus mechanism that provides a more environmentally friendly and scalable alternative to Proof of Work (PoW) and powers most of the web3 industry today. As PoS pioneers, Cosmos technology secures hundreds of blockchain projects and billions of dollars of digital assets, and Ethereum (launched as a PoW chain in 2015) made the historic switch to PoS in 2022. According to [ethereum.org](https://ethereum.org/en/developers/docs/consensus-mechanisms/pos), PoS is “more secure, less energy-intensive, and better for implementing new scaling solutions compared to the previous proof-of-work architecture.” However, as we briefly discussed in [*What Is Proof of Contribution?*](https://test3.gno.land/r/gnoland/blog:p/bgl-poc-1), PoS has vulnerabilities that can corrupt the network over time.\n\n### The Limitations of Proof of Stake (PoS)\n\nBeyond securing the network, the main goal of any consensus mechanism (PoW, PoS, DPoS, PoC, etc.) is to be as decentralized as possible and not reliant on any central actors. This can be measured by the Satoshi Score (or the Nakamoto coefficient), a quantitative measure that assesses a blockchain’s level of decentralization by calculating the minimum number of nodes needed to compromise a network or carry out a 51% attack. PoS systems can be bootstrapped within days (or even hours), starting off decentralized and achieving a high Satoshi Score.\n\nThe PoS chain Genesis allocates a default voting power to ~20-50 nodes, in general equally (or at least making sure that no single node has more than 5% of the voting power). This makes PoS chains decentralized enough (in theory) from block 0 with a near-perfect Satoshi score. However, in practice, PoS has two main issues. Because the system is dictated by money, PoS chains become imperfect over time. Anyone wealthy enough can stake their tokens progressively and use their accumulated power to sway decision-making on the chain—or take the network over completely.\n\nThe chain can limit the maximum voting power per validator node, but this is almost ineffective, as a malicious actor can carry out a Sybil attack on the network and create multiple validators to bypass the voting cap. Such an attack renders the max voting power per node useless and leaves the chain defenseless against a single organization or cartel gaining the majority of the voting power. PoS systems leave chains like Cosmos Hub and Ethereum at risk from such bad actors, cartels, and powerful protocols (such as Lido and Rocket Pool).\n\nWhile Proof of Contribution (PoC) can’t prevent Sybil attacks on standard user accounts (when malicious actors create multiple accounts with a single computer and transfer tokens within a few hours), it does make it almost impossible for validator nodes to suffer Sybil attacks. Since the community vets every person who is given voting power or sway in the network (including validator power) through the DAO, at no point can anyone \"spoof\" identities and gain major sway. \n\n### Where Proof of Contribution (PoC) Excels\n\nPoC is actually Proof of Authority (PoA) which, instead of offering up a resource like computing power or a financial stake, relies on validators staking their reputation. Anyone can join most public PoW and PoS networks without revealing their identity. However, by definition, PoA validators need to make themselves known and are selected based on their trustworthiness. This means PoA tends to work better when deployed in private or permissioned blockchains than in public platforms (because of this tendency toward centralization). \n\nPoC solves this problem, ensuring the network becomes increasingly decentralized over time by being governed by a decentralized entity, GovDAO. Like standard PoA chains, PoC chains launch with a handful of validators that must be identified and trusted by the network, meaning governance is centralized at the start, and the chain achieves a low Satoshi Score. The system is about contributing and earning contribution units, which are slow to gain and require human interaction. It takes months (or years) before there are enough actors in the DAO and sufficient voting power for the chain to be considered decentralized enough, according to the Nakamoto coefficient. \n\nPoC is thus slower to bootstrap than PoS and harder to achieve. You can think of PoC versus PoS as a marathon versus a sprint, whereby PoC starts slowly but then gains momentum over time, and PoS starts quickly but loses momentum over time (the graph below provides a visual representation of PoC versus PoS). \n\n[![Graph](https://gnolang.github.io/blog/2024-01-26_bgl-poc2/src/thumbs/graph-container.png)](https://gnolang.github.io/blog/2024-01-26_bgl-poc2/src/graph-container.png)\n\nThe GovDAO that owns the chain has a mandate to scale (to grow and decentralize) continuously as it adds more contributors. This means it becomes progressively larger over time, achieving high decentralization efficiency way beyond the initial fast sprint of PoS chains. Once established as a proven consensus mechanism and alternative to PoS, GovDAO can benefit from by any blockchain project (through an evolution of ICS) wanting to achieve decentralization and sustainability—PoC can secure Gno.land and the web3 industry at large.\n\n### Security-Conscious by Design\n\nAnother advantage of PoC is that because it’s reliant on human interactions, it is more Sybil-resistant by design. As discussed, it’s almost impossible to split a validator node into two (or more) nodes, making conducting a Sybil attack infinitely difficult. Since contribution units are not transferrable or exchangeable, PoC cannot suffer from whales attempting to purchase voting power quickly. If someone wanted to take over the network, they would need to invest years of their time making meaningful contributions. Their attack would be so slow that it would easily be prevented by humans monitoring the decentralization and adjusting the parameters. \n\nMoreover, GovDAO will activate and deactivate new validators on request, establish a KYC system for validators, and manage promotions of contributors with votes. This removes the possibility of a takeover happening overnight since the only way to gain validator or voting power is by voting on governance requests, which is slow and managed by humans. This is in contrast to PoS systems which are powerful and fully automated yet defenseless against such coordinated attacks.\n\nGno.land is built on the very premise that such an attack on a PoC network would never happen as it would be entirely counter-intuitive. Since contributions are not only about expertise but also alignment, it is our hypothesis that longstanding contributors who have invested years of time and brainpower in developing the chain will do their best to protect it rather than destroy it. The DAO system will endure thanks to the mix of expertise and alignment and the amount and frequency of contributions. \n\n### Concluding Thoughts\n\nBeyond separating voting power from net wealth, a core component of Proof of Contribution (PoC) is its focus on long-term sustainability. PoC makes the system fairer and more sustainable, ensuring participants are aligned and take actions that benefit the community and the broader ecosystem. PoC is slower to bootstrap and harder to achieve than PoS but focuses on long-term alignment and security. \n\nUnlike PoS, contributors receive rewards based on their contribution effort rather than how many tokens they stake. They are thus incentivized and recognized for the quality of their work, ideas, and alignment, driving participation and active engagement. Governance is allocated to the people most likely to care for the ecosystem’s long-term success—the contributors who have spent the most time working toward it.\n\n*II. Proof of Contribution vs Proof of Stake is the second in a [series of articles](https://test3.gno.land/r/gnoland/blog:p/bgl-poc1) to dive deeply into the philosophy, vision, mechanics, and work involved in developing a new consensus mechanism for the next generation of smart contract systems. Look out for subsequent editions and additional Building Gno.land series, and let us know what you think! Got questions? Join the Gno.land [Discord](https://discord.com/invite/S8nKUqwkPn) or follow us on [Twitter/X](https://x.com/_gnoland)*\n\n\n","gnoland,gnovm,tm2,PoC"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"0F6ejMj1MHMkopTMlfzuU/16wCAsem6HcmUM3GMrpURUXnV63z30kHJaag7hsmZ6kSZlxekwsVtkMLedQncZfg=="}],"memo":"from gnoblog-cli"},"blockNum":"243822"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["bgl-poc2","Building Gno.land - Proof of Contribution II","\n## II. Proof of Contribution vs Proof of Stake\n\nProof of Stake (PoS) is a robust consensus mechanism that provides a more environmentally friendly and scalable alternative to Proof of Work (PoW) and powers most of the web3 industry today. As PoS pioneers, Cosmos technology secures hundreds of blockchain projects and billions of dollars of digital assets, and Ethereum (launched as a PoW chain in 2015) made the historic switch to PoS in 2022. According to [ethereum.org](https://ethereum.org/en/developers/docs/consensus-mechanisms/pos), PoS is “more secure, less energy-intensive, and better for implementing new scaling solutions compared to the previous proof-of-work architecture.” However, as we briefly discussed in [*What Is Proof of Contribution?*](https://test3.gno.land/r/gnoland/blog:p/bgl-poc-1), PoS has vulnerabilities that can corrupt the network over time.\n\n### The Limitations of Proof of Stake (PoS)\n\nBeyond securing the network, the main goal of any consensus mechanism (PoW, PoS, DPoS, PoC, etc.) is to be as decentralized as possible and not reliant on any central actors. This can be measured by the Satoshi Score (or the Nakamoto coefficient), a quantitative measure that assesses a blockchain’s level of decentralization by calculating the minimum number of nodes needed to compromise a network or carry out a 51% attack. PoS systems can be bootstrapped within days (or even hours), starting off decentralized and achieving a high Satoshi Score.\n\nThe PoS chain Genesis allocates a default voting power to ~20-50 nodes, in general equally (or at least making sure that no single node has more than 5% of the voting power). This makes PoS chains decentralized enough (in theory) from block 0 with a near-perfect Satoshi score. However, in practice, PoS has two main issues. Because the system is dictated by money, PoS chains become imperfect over time. Anyone wealthy enough can stake their tokens progressively and use their accumulated power to sway decision-making on the chain—or take the network over completely.\n\nThe chain can limit the maximum voting power per validator node, but this is almost ineffective, as a malicious actor can carry out a Sybil attack on the network and create multiple validators to bypass the voting cap. Such an attack renders the max voting power per node useless and leaves the chain defenseless against a single organization or cartel gaining the majority of the voting power. PoS systems leave chains like Cosmos Hub and Ethereum at risk from such bad actors, cartels, and powerful protocols (such as Lido and Rocket Pool).\n\nWhile Proof of Contribution (PoC) can’t prevent Sybil attacks on standard user accounts (when malicious actors create multiple accounts with a single computer and transfer tokens within a few hours), it does make it almost impossible for validator nodes to suffer Sybil attacks. Since the community vets every person who is given voting power or sway in the network (including validator power) through the DAO, at no point can anyone \"spoof\" identities and gain major sway. \n\n### Where Proof of Contribution (PoC) Excels\n\nPoC is actually Proof of Authority (PoA) which, instead of offering up a resource like computing power or a financial stake, relies on validators staking their reputation. Anyone can join most public PoW and PoS networks without revealing their identity. However, by definition, PoA validators need to make themselves known and are selected based on their trustworthiness. This means PoA tends to work better when deployed in private or permissioned blockchains than in public platforms (because of this tendency toward centralization). \n\nPoC solves this problem, ensuring the network becomes increasingly decentralized over time by being governed by a decentralized entity, GovDAO. Like standard PoA chains, PoC chains launch with a handful of validators that must be identified and trusted by the network, meaning governance is centralized at the start, and the chain achieves a low Satoshi Score. The system is about contributing and earning contribution units, which are slow to gain and require human interaction. It takes months (or years) before there are enough actors in the DAO and sufficient voting power for the chain to be considered decentralized enough, according to the Nakamoto coefficient. \n\nPoC is thus slower to bootstrap than PoS and harder to achieve. You can think of PoC versus PoS as a marathon versus a sprint, whereby PoC starts slowly but then gains momentum over time, and PoS starts quickly but loses momentum over time (the graph below provides a visual representation of PoC versus PoS). \n\n[![Graph](https://gnolang.github.io/blog/2024-01-26_bgl-poc2/src/thumbs/graph-container.png)](https://gnolang.github.io/blog/2024-01-26_bgl-poc2/src/graph-container.png)\n\nThe GovDAO that owns the chain has a mandate to scale (to grow and decentralize) continuously as it adds more contributors. This means it becomes progressively larger over time, achieving high decentralization efficiency way beyond the initial fast sprint of PoS chains. Once established as a proven consensus mechanism and alternative to PoS, GovDAO can benefit from by any blockchain project (through an evolution of ICS) wanting to achieve decentralization and sustainability—PoC can secure Gno.land and the web3 industry at large.\n\n### Security-Conscious by Design\n\nAnother advantage of PoC is that because it’s reliant on human interactions, it is more Sybil-resistant by design. As discussed, it’s almost impossible to split a validator node into two (or more) nodes, making conducting a Sybil attack infinitely difficult. Since contribution units are not transferrable or exchangeable, PoC cannot suffer from whales attempting to purchase voting power quickly. If someone wanted to take over the network, they would need to invest years of their time making meaningful contributions. Their attack would be so slow that it would easily be prevented by humans monitoring the decentralization and adjusting the parameters. \n\nMoreover, GovDAO will activate and deactivate new validators on request, establish a KYC system for validators, and manage promotions of contributors with votes. This removes the possibility of a takeover happening overnight since the only way to gain validator or voting power is by voting on governance requests, which is slow and managed by humans. This is in contrast to PoS systems which are powerful and fully automated yet defenseless against such coordinated attacks.\n\nGno.land is built on the very premise that such an attack on a PoC network would never happen as it would be entirely counter-intuitive. Since contributions are not only about expertise but also alignment, it is our hypothesis that longstanding contributors who have invested years of time and brainpower in developing the chain will do their best to protect it rather than destroy it. The DAO system will endure thanks to the mix of expertise and alignment and the amount and frequency of contributions. \n\n### Concluding Thoughts\n\nBeyond separating voting power from net wealth, a core component of Proof of Contribution (PoC) is its focus on long-term sustainability. PoC makes the system fairer and more sustainable, ensuring participants are aligned and take actions that benefit the community and the broader ecosystem. PoC is slower to bootstrap and harder to achieve than PoS but focuses on long-term alignment and security. \n\nUnlike PoS, contributors receive rewards based on their contribution effort rather than how many tokens they stake. They are thus incentivized and recognized for the quality of their work, ideas, and alignment, driving participation and active engagement. Governance is allocated to the people most likely to care for the ecosystem’s long-term success—the contributors who have spent the most time working toward it.\n\n*II. Proof of Contribution vs Proof of Stake is the second in a [series of articles](/r/gnoland/blog:p/bgl-poc1) to dive deeply into the philosophy, vision, mechanics, and work involved in developing a new consensus mechanism for the next generation of smart contract systems. Look out for subsequent editions and additional Building Gno.land series, and let us know what you think! Got questions? Join the Gno.land [Discord](https://discord.com/invite/S8nKUqwkPn) or follow us on [Twitter/X](https://x.com/_gnoland)*\n\n\n","gnoland,gnovm,tm2,PoC"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"DLOMda3VALG2fVLTAGxN/q4Y6vF00BQgktDTrPEToEpW6fhc1FZnAH+ZLYJvriKS9Gd46SOOErWDWkOwdrFDxQ=="}],"memo":"from gnoblog-cli"},"blockNum":"243824"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1y6fn03cy5peeyl3a5p9g9vn4k8620jv6qc6mjd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Q52XLHbmtF462DNtKnsI4itf8QK7FxJoR/Wg5OEO5h97P6gMNnJNyTv34sbig1bbJBW78PgxiFHPPi8F14uQSg=="}],"memo":""},"blockNum":"244480"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15ed0n5qmzewvzm2mwx93nkyuhvp7wxyeuc4fh8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Be5liLoUNzKoP9lKv0NyfIIxFtOpFYc86rhxcTUuNZ1j3cLHDliV/7tus2kiWvsnvA/2++KFUZ6TRDugS6s7Bg=="}],"memo":""},"blockNum":"244482"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16r874m0q43fkssxk0nhteut7xdlkfh9wrm8tgr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+BrRfKWGZ3o4tM64uK5HKcThlS3Byca2bMILpLGuXMl8IhjBL96+vQ6j2IaGwtVfn80VHP+3YZGWAYGj5XNFZQ=="}],"memo":""},"blockNum":"244484"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1y6fn03cy5peeyl3a5p9g9vn4k8620jv6qc6mjd","package":{"Name":"cipher","Path":"gno.land/r/demo/cipher","Files":[{"Name":"GRC20.gno","Body":"package cipher\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tcipher  *grc20.AdminToken\r\n\tadmin std.Address = \"g1y6fn03cy5peeyl3a5p9g9vn4k8620jv6qc6mjd\"\r\n)\r\n\r\nfunc init() {\r\n\tcipher = grc20.NewAdminToken(\"cipherToken\", \"cipher\", 6)\r\n\tcipher.Mint(admin, 1000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn cipher.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := cipher.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := cipher.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tcipher.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tcipher.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tcipher.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tcipher.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tcipher.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn cipher.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := cipher.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5OLLBGcD1hBYR2Q7+I85+3XsovnS/3TmCG7/DXbgGKI"},"signature":"l7aoVILA+MYGMzg88u0K5s50IBOIYV5k2wVb/UxoCuw/KeUxAAvxCvzpIpd+59FVIxU91xCofDTk53rJM1CZBg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"244490"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ed0n5qmzewvzm2mwx93nkyuhvp7wxyeuc4fh8","package":{"Name":"ciph2","Path":"gno.land/r/demo2/ciph2","Files":[{"Name":"GRC20.gno","Body":"package ciph2\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tciph2  *grc20.AdminToken\r\n\tadmin std.Address = \"g1hqzeju0p0eup9rgxa0pxvyc0y7wnzjrdvppsy5\"\r\n)\r\n\r\nfunc init() {\r\n\tciph2 = grc20.NewAdminToken(\"ciph2Token\", \"ciph2\", 6)\r\n\tciph2.Mint(admin, 1000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn ciph2.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := ciph2.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := ciph2.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tciph2.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tciph2.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tciph2.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tciph2.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tciph2.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn ciph2.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := ciph2.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxS0vMC49YknTQ7YE+BmRrFgCmRoWioEA/lHq8TPlC2K"},"signature":"HupEH9lcGKx6e2kHiqB9aWrjjzvEPlzp1DqUUzH5WjlKyXwkZCqKs64MKSI8376wsBfvZcbjoUwEzq8C3QDUAA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"244493"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g16r874m0q43fkssxk0nhteut7xdlkfh9wrm8tgr","package":{"Name":"daerk3","Path":"gno.land/r/demo/daerk3","Files":[{"Name":"GRC20.gno","Body":"package daerk3\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tdaerk3  *grc20.AdminToken\r\n\tadmin std.Address = \"g1hqzeju0p0eup9rgxa0pxvyc0y7wnzjrdvppsy5\"\r\n)\r\n\r\nfunc init() {\r\n\tdaerk3 = grc20.NewAdminToken(\"daerk3Token\", \"daerk3\", 6)\r\n\tdaerk3.Mint(admin, 1000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn daerk3.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := daerk3.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := daerk3.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tdaerk3.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tdaerk3.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tdaerk3.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tdaerk3.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tdaerk3.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn daerk3.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := daerk3.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au1bG9RLABO5VNMeMrV7L3QN6jKWXyWlCamsch1RtTlB"},"signature":"9XudDpeRNHcCFVyuJQbuADe7kq1HY8ZoKnYX7wEiE0o01GMVQEIQNmwWH/NYyOEyEu9s+/ZGqQw1auNCIEnusw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"244496"}
